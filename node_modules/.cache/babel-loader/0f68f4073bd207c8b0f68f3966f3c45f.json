{"ast":null,"code":"var _jsxFileName = \"/Users/vladislavformaluk/ToDoList/src/components/AppHeader.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Button, { SelectButton } from \"./Button\";\nimport styles from '../styles/modules/app.module.scss';\nimport ToDoModal from \"./ToDoModal\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AppHeader = () => {\n  _s();\n\n  const [modalOpen, setModalOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.appHeader,\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      onClick: () => setModalOpen(true),\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SelectButton, {\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"all\",\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"incomplete\",\n        children: \"Incomplete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"complete\",\n        children: \"Complete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToDoModal, {\n      modalOpen: modalOpen,\n      setModalOpen: setModalOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AppHeader, \"4WKhQ/Cs7f6+2hEqv7m6lmVEtsE=\");\n\n_c = AppHeader;\nexport default AppHeader;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppHeader\");","map":{"version":3,"sources":["/Users/vladislavformaluk/ToDoList/src/components/AppHeader.js"],"names":["React","Button","SelectButton","styles","ToDoModal","useState","AppHeader","modalOpen","setModalOpen","appHeader"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,IAAiBC,YAAjB,QAAqC,UAArC;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAM,CAAEC,SAAF,EAAaC,YAAb,IAA8BH,QAAQ,CAAC,KAAD,CAA5C;AAEA,sBACI;AAAK,IAAA,SAAS,EAAEF,MAAM,CAACM,SAAvB;AAAA,4BACI,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AACI,MAAA,OAAO,EAAE,MAAMD,YAAY,CAAC,IAAD,CAD/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI,QAAC,YAAD;AAAA,8BACI;AAAQ,QAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAUI,QAAC,SAAD;AAAW,MAAA,SAAS,EAAED,SAAtB;AAAiC,MAAA,YAAY,EAAEC;AAA/C;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CAjBD;;GAAMF,S;;KAAAA,S;AAmBN,eAAeA,SAAf","sourcesContent":["import React from 'react';\nimport Button, { SelectButton } from \"./Button\";\nimport styles from '../styles/modules/app.module.scss';\nimport ToDoModal from \"./ToDoModal\";\nimport { useState } from \"react\";\n\nconst AppHeader = () => {\n    const [ modalOpen, setModalOpen ] = useState(false);\n\n    return (\n        <div className={styles.appHeader}>\n            <Button variant='primary'\n                onClick={() => setModalOpen(true)}\n            >Add Task\n            </Button>\n            <SelectButton>\n                <option value='all'>All</option>\n                <option value='incomplete'>Incomplete</option>\n                <option value='complete'>Complete</option>\n            </SelectButton>\n            <ToDoModal modalOpen={modalOpen} setModalOpen={setModalOpen}/>\n        </div>\n    );\n};\n\nexport default AppHeader;"]},"metadata":{},"sourceType":"module"}